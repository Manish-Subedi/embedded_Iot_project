
#include "MainHeader.h"

static volatile std::atomic_int counter;
static volatile uint32_t systicks;
#ifdef __cplusplus


extern "C" {
#endif

void SysTick_Handler(void)
{
	systicks++;
	if(counter > 0) counter--;
}

uint32_t get_ticks(void)
{
	return systicks;
}

#ifdef __cplusplus
}
#endif

void Sleep(int ms)
{
	counter = ms;
		while(counter > 0) {
			__WFI(); // this put cpu in sleep mood until and interput
		}
}

/* this function is required by the modbus library */
uint32_t millis() {
	return systicks;
}

/* function prototypes */
uint16_t SDP_read(int16_t);
void socketTest();
void mqtt_init();

int main(void)
{

#if defined (__USE_LPCOPEN)
	// Read clock settings and update SystemCoreClock variable
	SystemCoreClockUpdate();
#if !defined(NO_BOARD_LIB)
	// Set up and initialize all required blocks and
	// functions related to the board hardware
	Board_Init();
	// Set the LED to the state of "On"
	Board_LED_Set(0, true);
#endif
#endif
	// this call initializes debug uart for stdout redirection
	retarget_init();
	/* Set up SWO to PIO1_2 */
	Chip_SWM_MovablePortPinAssign(SWM_SWO_O, 1, 2); // Needed for SWO printf

	/* Enable and setup SysTick Timer at a periodic rate */
	SysTick_Config(SystemCoreClock / 1000);

	/* configure LCD pinouts */
	DigitalIoPin *rs = new DigitalIoPin(0, 29, DigitalIoPin::output);
	DigitalIoPin *en = new DigitalIoPin(0, 9, DigitalIoPin::output);
	DigitalIoPin *d4 = new DigitalIoPin(0, 10, DigitalIoPin::output);
	DigitalIoPin *d5 = new DigitalIoPin(0, 16, DigitalIoPin::output);
	DigitalIoPin *d6 = new DigitalIoPin(1, 3, DigitalIoPin::output);
	DigitalIoPin *d7 = new DigitalIoPin(0, 0, DigitalIoPin::output);

	LiquidCrystal *lcd = new LiquidCrystal(rs, en, d4, d5, d6, d7);

	// configure display geometry
	lcd->begin(16, 2);
	lcd->setCursor(0, 0);
	lcd->print("LCD Ready!");

	/* Configure buttons */
	DigitalIoPin sw1(1, 8, DigitalIoPin::pullup, true);
	DigitalIoPin sw2(0, 5, DigitalIoPin::pullup, true);
	DigitalIoPin sw3(0, 6, DigitalIoPin::pullup, true);
	DigitalIoPin sw4(0, 7, DigitalIoPin::pullup, true);


    /* Modbus node for fan */
    ModbusMaster node_fan(1); // Create modbus object that connects to slave id 1
	node_fan.begin(9600); // set transmission rate - other parameters are set inside the object and can't be changed here
	ModbusRegister freq_fan(&node_fan, 0);
	ModbusRegister pulse_fan(&node_fan, 4, false);


	/* Modbus node for GMP252 co2 sensor */
	ModbusMaster node_gmp(240);
	node_gmp.begin(9600);
	ModbusRegister co2(&node_gmp, 0x0101, false);


	/* Modbus node for HMP60 temperature & humidity sensor */
	ModbusMaster node_hmp(241);
	node_hmp.begin(9600);
	ModbusRegister rh(&node_hmp, 0x0100, false);
	ModbusRegister temp(&node_hmp, 0x0101, false);

	Chip_RIT_Init(LPC_RITIMER);

	SimpleMenu menu;
	std::string options[2] = { "Auto", "Manual" }; //define macro here
	/* Events for sensor data */
	IntegerEdit *frequency_ = new IntegerEdit(lcd, std::string("Frequency"), 0, 100); //define macro
	IntegerEdit *pressure_ = new IntegerEdit(lcd, std::string("Pressure"), 0, 120); //define macro
	IntegerEdit *target_ = new IntegerEdit(lcd, std::string("Target pressure"), 0, 120);
	ModeEdit *modes_ = new ModeEdit(lcd, std::string("Mode"), options, 2);

	menu.addItem(new MenuItem(modes_));
	menu.addItem(new MenuItem(frequency_));
	menu.addItem(new MenuItem(pressure_));
	menu.addItem(new MenuItem(target_));

	menu.event(MenuItem::show);

	//socketTest();
	//MqttController mqtt(SSID, PASSWORD, BROKER_IP, BROKER_PORT);

	while(1){

		/*
		int fan_speed = 6;
		freq_fan.write(fan_speed*100); //frequency 200

		printf("frequency of the fan is %4d\n", fan_speed*100);
		*/
		/* menu set values
		speed_->setValue(fan_speed);
		pressure_->setValue(pressure);
		*/

		int current_pressure = 0; //read this from MQTT
		int current_freq = 0; //get from MQTT

		if(sw1.read()){
			while(sw1.read());
			menu.event(MenuItem::up);
		}
		if(sw2.read()){
			while(sw2.read());
			menu.event(MenuItem::ok);
		}
		/*
		if(sw2.read()){
			while(sw2.read());
			if(modes_[0].getFocus()){
				if(frequency_->getFocus()){
					freq_fan.write((frequency_->getValue())*100);
					menu.event(MenuItem::ok);
				}
			}
				if(pressure_->getFocus()){
					if(pressure_->getValue() < current_pressure){
						while(!(pressure_->getValue() == current_pressure)){
							current_freq++;
						}
						freq_fan.write(current_freq*100);
					}
					if(pressure_->getValue() > current_pressure){
						while(!(pressure_->getValue() == current_pressure)){
							current_freq--;
						}
						freq_fan.write(current_freq*100);
					}
					menu.event(MenuItem::ok);
				}
		}
		*/
		if(sw3.read()){
			while(sw3.read());
			menu.event(MenuItem::down);

		}
	}

}
void delay_systick(const int ticks)
{
	int delay = ticks;
	while (delay > 0) {
		__WFI();
	}
}


/* read data from Sensirion SDP610 â€“ 120Pa pressure sensor */
uint16_t SDP_read(int16_t pressure){

	/* I2C objects and config */
	I2C_config cfg_i2c ;
	I2C i2c(cfg_i2c);

	uint8_t tx[1];
	uint8_t rx[3];

	tx[0]=SDP_CMD_READ;

	i2c.transaction(SDP_ADDRESS,tx,1,rx,3);

	// Combine read bytes
	uint16_t raw = (rx[0] << 8) | rx[1];

	// uint containing two's complement -> int16
	if (raw & 0x8000) {
		raw = -~(raw - 1);
	}
	pressure = raw;

	// Scaling
	pressure /= 240;

	// altitude correction
	pressure *= 0.95;
	printf("Pressure: %d\n",pressure);
	return pressure;


}

/* MQTT config */

void messageArrived(MessageData* data)
{
	printf("Message arrived on topic %.*s: %.*s\n", data->topicName->lenstring.len, data->topicName->lenstring.data,
			data->message->payloadlen, (char *)data->message->payload);
}

void mqtt_init()
{
	/* connect to mqtt broker, subscribe to a topic, send and receive messages regularly every 1 sec */
	MQTTClient client;
	Network network;
	unsigned char sendbuf[256], readbuf[2556];
	int rc = 0, count = 0;
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;

	NetworkInit(&network,SSID,PASSWORD);
	MQTTClientInit(&client, &network, 30000, sendbuf, sizeof(sendbuf), readbuf, sizeof(readbuf));

	char* address = (char *)BROKER_IP;
	if ((rc = NetworkConnect(&network, address, BROKER_PORT)) != 0)
		printf("Return code from network connect is %d\n", rc);

	connectData.MQTTVersion = 3;
	connectData.clientID.cstring = (char *)"esp_test";

	if ((rc = MQTTConnect(&client, &connectData)) != 0)
		printf("Return code from MQTT connect is %d\n", rc);
	else
		printf("MQTT Connected\n");

	/* subscribe to the topic */
	if ((rc = MQTTSubscribe(&client, "Group5/controller/settings", QOS2, messageArrived)) != 0)
		printf("Return code from MQTT subscribe is %d\n", rc);

	//if ((rc = MQTTSubscribe(&client, "Group5/controller/status", QOS2, messageArrived)) != 0)
			//printf("Return code from MQTT subscribe is %d\n", rc);

	uint32_t sec = 0;
	while (true)
	{
		// send one message per second
		if(get_ticks() / 1000 != sec) {
			MQTTMessage message;
			char payload[30];

			sec = get_ticks() / 1000;
			++count;

			message.qos = QOS1;
			message.retained = 0;
			message.payload = payload;
			sprintf(payload, "message number %d", count);
			message.payloadlen = strlen(payload);

			/* publish to the topic */
			if ((rc = MQTTPublish(&client, "Grp5/controller/settings", &message)) != 0)
				printf("Return code from MQTT publish is %d\n", rc);

			//if ((rc = MQTTPublish(&client, "Grp5/controller/status", &message)) != 0)
				//printf("Return code from MQTT publish is %d\n", rc);
		}

		if(rc != 0) {
			NetworkDisconnect(&network);
			// we should re-establish connection!!
			break;
		}

		// run MQTT for 100 ms
		if ((rc = MQTTYield(&client, 100)) != 0)
			printf("Return code from yield is %d\n", rc);
	}

	printf("MQTT connection closed!\n");

}

void socketTest()
{

	esp_socket(SSID, PASSWORD);

	const char *http_request = "GET / HTTP/1.0\r\n\r\n"; // HTTP requires cr-lf to end a line

	for(int i = 0; i < 2; ++i) {
		printf("\nopen socket\n");
		esp_connect(1,  "www.metropolia.fi", 80);
		printf("\nsend request\n");
		esp_write(1, http_request, strlen(http_request));

		uint32_t now = get_ticks();
		printf("\nreply:\n");

		while(get_ticks() - now < 3000) {
			char buffer[64];
			memset(buffer, 0, 64);
			if(esp_read(1, buffer, 63) > 0) {
				fputs(buffer,stdout);
			}
		}
		esp_close(1);

		printf("\nsocket closed\n");
	}

}
/* Get fan frequency and pulse counts */

